<?php

namespace App\{{ namespace }}\{{ domain }}\Notifications;

use App\{{ namespace }}\{{ domain }}\DataTransferObjects\{{ class }}Data;
use App\{{ namespace }}\{{ domain }}\Notifications\Concerns\HasDataAsArray;
use Illuminate\Notifications\Notification;

{% if notifications.mail %}
use Illuminate\Support\Arr;
use Illuminate\Notifications\Messages\MailMessage;
{% endif %}

{% if notifications.slack %}
use App\{{ namespace }}\{{ domain }}\Notifications\Concerns\HasSlackNotification;
use Illuminate\Notifications\Slack\SlackMessage;
{% endif %}

{% if notifications.teams %}
use App\{{ namespace }}\{{ domain }}\Notifications\Concerns\HasMicrosoftTeamsNotification;
use NotificationChannels\MicrosoftTeams\Exceptions\CouldNotSendNotification;
use NotificationChannels\MicrosoftTeams\MicrosoftTeamsChannel;
use NotificationChannels\MicrosoftTeams\MicrosoftTeamsMessage;
{% endif %}

class {{ class }}Created extends Notification
{
    use HasDataAsArray;
    {% if notifications.teams %}
    use HasMicrosoftTeamsNotification;
    {% endif %}
    {% if notifications.slack %}
    use HasSlackNotification;
    {% endif %}

    public function __construct(
        public {{ class }}Data|array ${{ id }}Data,
    ) {}

    public function via($notifiable): array
    {
        return [
            {% if notifications.mail %}
            'mail',
            {% endif %}
            {% if notifications.teams %}
            MicrosoftTeamsChannel::class,
            {% endif %}
            {% if notifications.slack %}
            'slack',
            {% endif %}
        ];
    }

    {% if notifications.mail %}
    public function toMail($notifiable): MailMessage
    {
        return (new MailMessage)
            ->from(config('mail.from.address'))
            ->subject('{{ class }} created successfully')
            ->greeting('Hello,')
            ->line('A new {{ class }} has been created')
            ->lines(Arr::map($this->getDataAsArray(), function ($value, $key) {
                return '- '.$key.': '.$value;
            }));
    }
    {% endif %}

    {% if notifications.teams %}
    /**
     * @throws CouldNotSendNotification
     */
    public function toMicrosoftTeams($notifiable): MicrosoftTeamsMessage
    {
        return MicrosoftTeamsMessage::create()
            ->to(config('services.microsoft_teams.webhook_url'))
            ->type('success')
            ->title('{{ class }} created successfully')
            ->content(
                $this->getMicrosoftTeamsContent('A new {{ id }} has been created')
            );
    }
    {% endif %}

    {% if notifications.slack %}
    public function toSlack($notifiable): SlackMessage
    {
        return (new SlackMessage)
            ->text('A new {{ class }} has been created')
            ->headerBlock('A new {{ class }} has been created')
            ->sectionBlock($this->getSlackSectionBlock(fields: true));
    }
    {% endif %}
}
