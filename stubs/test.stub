<?php

namespace Tests\Unit\{{ namespace }}\{{ domain }};

use App\{{ namespace }}\{{ domain }}\Actions\Create{{ class }};
use App\{{ namespace }}\{{ domain }}\Actions\Delete{{ class }};
use App\{{ namespace }}\{{ domain }}\Actions\Update{{ class }};
use App\{{ namespace }}\{{ domain }}\DataTransferObjects\{{ class }}Data;
use App\{{ namespace }}\{{ domain }}\Projections\{{ class }};

{% if useCarbon %}
use Illuminate\Support\Carbon;
{% endif %}

use Illuminate\Foundation\Testing\DatabaseMigrations;
use Illuminate\Foundation\Testing\WithFaker;
use PHPUnit\Framework\Attributes\Test;
use Tests\TestCase;

{% if notifications %}
use Illuminate\Support\Facades\Notification;
use App\{{ namespace }}\{{ domain }}\Notifications\{{ class }}Created as {{ class }}CreatedNotification;
use App\{{ namespace }}\{{ domain }}\Notifications\{{ class }}Deleted as {{ class }}DeletedNotification;
use App\{{ namespace }}\{{ domain }}\Notifications\{{ class }}Updated as {{ class }}UpdatedNotification;
use Illuminate\Notifications\AnonymousNotifiable;
{% endif %}
{% if notifications and failed_events %}
use App\{{ namespace }}\{{ domain }}\Notifications\{{ class }}CreationFailed as {{ class }}CreationFailedNotification;
use App\{{ namespace }}\{{ domain }}\Notifications\{{ class }}DeletionFailed as {{ class }}DeletionFailedNotification;
use App\{{ namespace }}\{{ domain }}\Notifications\{{ class }}UpdateFailed as {{ class }}UpdateFailedNotification;
{% endif %}

{% if uuid %}
use Ramsey\Uuid\Uuid;
{% endif %}

class {{ class }}Test extends TestCase
{
    use DatabaseMigrations;
    use WithFaker;

    protected function fakeData(): {{ class }}Data
    {
        return new {{ class }}Data(
            {{ test:data-transfer-object }}
        );
    }

    protected function fakeInvalidData(): {{ class }}Data
    {
        return new {{ class }}Data(
            // @todo Add invalid data here
        );
    }

    #[Test]
    public function can_create_{{ id }}_model()
    {
        {% if notifications %}
        Notification::fake();
        {% endif %}

        $data = $this->fakeData();

        (new Create{{ class }})($data);

        /** @var {{ class }} $record */
        $record = {{ class }}::query()->first();
        $this->assertNotEmpty($record);
        {{ test:assert($data, $record) }}

        {% if notifications %}
        Notification::assertSentTo(new AnonymousNotifiable, {{ class }}CreatedNotification::class);
        {% endif %}
        {% if notifications and failed_events %}
        Notification::assertNotSentTo(new AnonymousNotifiable, {{ class }}CreationFailedNotification::class);
        {% endif %}
    }

    #[Test]
    public function cannot_create_{{ id }}_model_with_invalid_data()
    {
        {% if notifications %}
        Notification::fake();
        {% endif %}

        $data = $this->fakeInvalidData();

        (new Create{{ class }})($data);

        $this->assertNull({{ class }}::query()->first());

        {% if notifications %}
        Notification::assertNotSentTo(new AnonymousNotifiable, {{ class }}CreatedNotification::class);
        {% endif %}
        {% if notifications and failed_events %}
        Notification::assertSentTo(new AnonymousNotifiable, {{ class }}CreationFailedNotification::class);
        {% endif %}
    }

    #[Test]
    public function can_update_{{ id }}_model()
    {
        {% if notifications %}
        Notification::fake();
        {% endif %}

        $data = $this->fakeData();

        (new Create{{ class }})($data);

        /** @var {{ class }} $record */
        $record = {{ class }}::query()->first();
        $this->assertNotEmpty($record);
        {{ test:assert($data, $record) }}

        $updateData = $this->fakeData();

        (new Update{{ class }})($record->{{ primary_key }}, $updateData);

        $updatedRecord = {{ class }}::{{ primary_key }}($record->{{ primary_key }});
        $this->assertNotEmpty($updatedRecord);
        {{ test:assert($updateData, $updatedRecord) }}

        {% if notifications %}
        Notification::assertSentTo(new AnonymousNotifiable, {{ class }}UpdatedNotification::class);
        {% endif %}
        {% if notifications and failed_events %}
        Notification::assertNotSentTo(new AnonymousNotifiable, {{ class }}UpdateFailedNotification::class);
        {% endif %}
    }

    #[Test]
    public function cannot_update_non_existing_{{ id }}_model()
    {
        {% if notifications %}
        Notification::fake();
        {% endif %}

        {% if uuid %}
        $primaryKey = Uuid::uuid4()->toString();
        {% endif %}
        {% if !uuid %}
        $primaryKey = rand(111111, 99999999);
        {% endif %}

        $updateData = $this->fakeData();

        (new Update{{ class }})($primaryKey, $updateData);

        {% if notifications %}
        Notification::assertNotSentTo(new AnonymousNotifiable, {{ class }}UpdatedNotification::class);
        {% endif %}
        {% if notifications and failed_events %}
        Notification::assertSentTo(new AnonymousNotifiable, {{ class }}UpdateFailedNotification::class);
        {% endif %}
    }

    #[Test]
    public function cannot_update_{{ id }}_model_with_invalid_data()
    {
        {% if notifications %}
        Notification::fake();
        {% endif %}

        $data = $this->fakeData();

        (new Create{{ class }})($data);

        /** @var {{ class }} $record */
        $record = {{ class }}::query()->first();
        $this->assertNotEmpty($record);
        {{ test:assert($data, $record) }}

        $updateData = $this->fakeInvalidData();

        (new Update{{ class }})($record->{{ primary_key }}, $updateData);

        $updatedRecord = {{ class }}::{{ primary_key }}($record->{{ primary_key }});
        $this->assertNotEmpty($updatedRecord);
        {{ test:assert($updateData, $updatedRecord) }}

        {% if notifications %}
        Notification::assertNotSentTo(new AnonymousNotifiable, {{ class }}UpdatedNotification::class);
        {% endif %}
        {% if notifications and failed_events %}
        Notification::assertSentTo(new AnonymousNotifiable, {{ class }}UpdateFailedNotification::class);
        {% endif %}
    }

    #[Test]
    public function can_delete_{{ id }}_model()
    {
        {% if notifications %}
        Notification::fake();
        {% endif %}

        $data = $this->fakeData();

        (new Create{{ class }})($data);

        /** @var {{ class }} $record */
        $record = {{ class }}::query()->first();
        $this->assertNotNull($record);

        (new Delete{{ class }})($record->{{ primary_key }});

        $this->assertNull({{ class }}::query()->where('{{ primary_key }}', $record->{{ primary_key }})->first());

        {% if notifications %}
        Notification::assertSentTo(new AnonymousNotifiable, {{ class }}DeletedNotification::class);
        {% endif %}
        {% if notifications and failed_events %}
        Notification::assertNotSentTo(new AnonymousNotifiable, {{ class }}DeletionFailedNotification::class);
        {% endif %}
    }

    #[Test]
    public function cannot_delete_non_existing_{{ id }}_model()
    {
        {% if notifications %}
        Notification::fake();
        {% endif %}

        {% if uuid %}
        $primaryKey = Uuid::uuid4()->toString();
        {% endif %}
        {% if !uuid %}
        $primaryKey = rand(111111, 99999999);
        {% endif %}
        (new Delete{{ class }})($primaryKey);

        $this->assertNull({{ class }}::query()->where('{{ primary_key }}', $primaryKey)->first());

        {% if notifications %}
        Notification::assertNotSentTo(new AnonymousNotifiable, {{ class }}DeletedNotification::class);
        {% endif %}
        {% if notifications and failed_events %}
        Notification::assertSentTo(new AnonymousNotifiable, {{ class }}DeletionFailedNotification::class);
        {% endif %}
    }
}